package ch.bfh.btx8081.w2014.red.health;

import models.Address;
import models.Client;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.Theme;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.HorizontalLayout;

import controller.ClientController;

@Theme("mytheme")
@SuppressWarnings("serial")
public class DetailsView extends CustomComponent implements View {

	private FieldGroup binder;
	private int currentClientNr;

	@AutoGenerated
	private Button button_return, button_edit, button_save, button_cancel;
	@AutoGenerated
	private TextField field_mobile, field_email, field_street, field_zip,
			field_city, field_country;
	private Label field_doctor, field_emergency;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public DetailsView() {
		setSizeFull();

		// button to edit
		button_edit = new Button();
		button_edit.setCaption("Edit");
		button_edit.setImmediate(true);
		button_edit.setVisible(true);

		// button to save
		button_save = new Button();
		button_save.setCaption("Save");
		button_save.setImmediate(true);
		button_save.setVisible(false);

		// button to cancel
		button_cancel = new Button();
		button_cancel.setCaption("Cancel");
		button_cancel.setImmediate(true);
		button_cancel.setVisible(false);

		// return button
		button_return = new Button();
		button_return.setCaption("Return");
		button_return.setImmediate(true);

		// TextFields displaying secondary information as address, phone and
		// eMail
		field_street = new TextField("street");
		field_street.setWidth("250px");

		field_zip = new TextField("zip / city");
		field_zip.setWidth("100px");

		field_city = new TextField(" ");
		field_city.setWidth("150px");

		field_country = new TextField("country");
		field_country.setWidth("250px");

		field_mobile = new TextField("phone Nr.");
		field_mobile.setWidth("250px");

		field_email = new TextField("eMail");
		field_email.setWidth("250px");

		// labels for secondary information displaying emergency contact and
		// attending doctor: information is not to be modified!
		field_emergency = new Label();
		field_emergency.setCaption("emergency contact");
		field_emergency.setImmediate(false);
		field_emergency.setWidth("250px");

		field_doctor = new Label();
		field_doctor.setCaption("attending doctor");
		field_doctor.setImmediate(false);
		field_doctor.setWidth("250px");

		// Aligning zip and city next to each other
		HorizontalLayout h1 = new HorizontalLayout();
		h1.addComponents(field_zip, field_city);
		h1.setMargin(new MarginInfo(false, false, false, false));
		h1.setSizeUndefined();

		// Adds the components to a panel viewing them on top of each other
		VerticalLayout v1 = new VerticalLayout();
		v1.addComponents(field_street, h1, field_country, field_mobile,
				field_email, field_emergency, field_doctor);
		v1.setSizeUndefined();

		// Adds the buttons to a panel viewing them next to each other
		HorizontalLayout hbuttons = new HorizontalLayout();
		hbuttons.addComponents(button_edit, button_save, button_cancel);
		hbuttons.setSpacing(true);
		hbuttons.setMargin(new MarginInfo(true, true, true, false));
		hbuttons.setSizeUndefined();

		// Combines both the Layouts h1 and v1 into one VerticalLayout viewing
		// them on top of each other
		VerticalLayout v2 = new VerticalLayout();
		v2.addComponents(v1, hbuttons);
		v2.setSizeUndefined();

		// add the VerticalLAyout v2 into another VerticalLayout for formatting
		// and sets the Alignment to Middle Center
		VerticalLayout viewLayout = new VerticalLayout(v2);
		viewLayout.setSizeFull();
		viewLayout.setComponentAlignment(v2, Alignment.TOP_CENTER);
		setCompositionRoot(viewLayout);

		// the action when the "Edit" button has been clicked. Enables
		// textfields to enter information from details
		// the action when the "Edit" button has been clicked. Enables
		// textfields to enter information from details
		button_edit.addClickListener(new Button.ClickListener() {

			// Enables textfields to enter information from details
			@Override
			public void buttonClick(ClickEvent event) {

				setClientDataToReadOnly(false);

				button_save.setVisible(true);
				button_cancel.setVisible(true);
				button_edit.setVisible(false);

			}
		});

		// the action when the "Save" button has been clicked. Save textfields
		// from details
		button_save.addClickListener(new Button.ClickListener() {

			// Save textfields from details
			@Override
			public void buttonClick(ClickEvent event) {

				try {
					binder.commit();
				} catch (CommitException e) {

					e.printStackTrace();
				}

				setClientDataToReadOnly(true);

				button_save.setVisible(false);
				button_cancel.setVisible(false);
				button_edit.setVisible(true);

			}
		});

		// the action when the "Cancel" button has been clicked. Cancel edit
		// textfields from details
		button_cancel.addClickListener(new Button.ClickListener() {

			// Cancel edit textfields from details
			@Override
			public void buttonClick(ClickEvent event) {

				binder.discard();

				setClientDataToReadOnly(true);

				button_save.setVisible(false);
				button_cancel.setVisible(false);
				button_edit.setVisible(true);

			}
		});

		button_return.addClickListener(new Button.ClickListener() {
			// returns to the Clients List
			@Override
			public void buttonClick(ClickEvent event) {

				((MainUI) UI.getCurrent()).navigator
						.navigateTo(MainUI.CLIENTVIEW + "/" + currentClientNr);
			}
		});

	}

	@Override
	public void enter(ViewChangeEvent event) {
		// Check if valid client
		if (event.getParameters() == null || event.getParameters().isEmpty()) {
			setCaption("Kein Klient übermittelt");
			return;
		}

		int clientNr = Integer.parseInt(event.getParameters());
		Client client = ClientController.getClientForID(clientNr);
		if (client == null) {
			setCaption("Kein gültiger Klient");
			return;
		}

		setClientDataToReadOnly(false);
		loadClientData(client);
		setClientDataToReadOnly(true);
		currentClientNr = clientNr;

		// add return button
		((MainUI) UI.getCurrent()).addMenuElement(button_return);
	}

	// Set for all client information fields the ReadOnly state
	private void setClientDataToReadOnly(boolean readOnly) {
		field_street.setReadOnly(readOnly);
		field_zip.setReadOnly(readOnly);
		field_city.setReadOnly(readOnly);
		field_country.setReadOnly(readOnly);
		field_mobile.setReadOnly(readOnly);
		field_mobile.setReadOnly(readOnly);
		field_email.setReadOnly(readOnly);
		field_emergency.setReadOnly(readOnly);
		field_doctor.setReadOnly(readOnly);

	}

	// loads the client data to the related variables
	private void loadClientData(Client c) {

		field_emergency.setValue(c.getEmergencyContact().getFirstName() + " "
				+ c.getEmergencyContact().getLastName());
		field_doctor.setValue(c.getDoc().getFirstName() + " "
				+ c.getDoc().getLastName());
		addItemPropertyToField(c);

	}

	// binds the client datas to the related field

	private void addItemPropertyToField(Client c) {

		// To prevent a null point exception, the clients address must be set.
		// If the clients address is NULL, we set a default address.
		if (c.getAddress() == null) {
			Address defaultAddresss = new Address(null, null, null, null);
			c.setAddress(defaultAddresss);
		}

		BeanItem<Client> item = new BeanItem<Client>(c);
		item.addNestedProperty("address.street");
		item.addNestedProperty("address.zip");
		item.addNestedProperty("address.city");
		item.addNestedProperty("address.country");

		field_street.setPropertyDataSource(item
				.getItemProperty("address.street"));

		field_zip.setPropertyDataSource(item.getItemProperty("address.zip"));

		field_city.setPropertyDataSource(item.getItemProperty("address.city"));

		field_country.setPropertyDataSource(item
				.getItemProperty("address.country"));

		field_mobile.setPropertyDataSource(item.getItemProperty("mobileNr"));

		field_email.setPropertyDataSource(item.getItemProperty("email"));

		binder = new FieldGroup(item);

		binder.bind(field_street, "address.street");
		binder.bind(field_zip, "address.zip");
		binder.bind(field_city, "address.city");
		binder.bind(field_country, "address.country");
		binder.bind(field_mobile, "mobileNr");
		binder.bind(field_email, "email");

		binder.setBuffered(true);

	}
}
