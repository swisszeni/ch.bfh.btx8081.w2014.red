package ch.bfh.btx8081.w2014.red.health;

import java.io.File;

import models.Address;
import models.Client;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.Theme;
import com.vaadin.data.util.BeanItem;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FileResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;

import controller.ClientController;

@Theme("mytheme")
@SuppressWarnings("serial")
public class ClientView extends CustomComponent implements View {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TextField textField_details;
	@AutoGenerated
	private Label label_title, label_lastname, label_firstname,
			label_birthdate, label_street, label_zip, label_city,
			label_country, label_status, label_mobile, label_email,
			label_emergency, label_doctor;
	@AutoGenerated
	private Button button_details;
	@AutoGenerated
	private Embedded embedded_picture;
	private TextField field_lastname, field_firstname, field_mobile,
			field_email, field_street, field_zip, field_city, field_country,
			field_showstatus;
	Label field_doctor;
	Label field_emergency;
	private DateField field_birthdate;

	private boolean isHidden = true;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ClientView() {
		setSizeFull();

		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {

		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		// setWidth("100.0%");
		// setHeight("100.0%");

		// add a hardcoded picutre to Embedded elemet
		FileResource res = new FileResource(new File(
				"C:\\Users\\florian\\Desktop\\feeeeeediii.jpg"));

		// embedded_picture
		embedded_picture = new Embedded();
		embedded_picture.setImmediate(false);
		embedded_picture.setWidth("160px");
		embedded_picture.setHeight("200px");
		embedded_picture.setSource(res);
		embedded_picture.setType(1);
		embedded_picture.setMimeType("image/png");

		mainLayout.addComponent(embedded_picture,
				"top:100.0px;right:415.0px;left:61.0px;");

		// button_details
		button_details = new Button();
		button_details.setCaption("Details");
		button_details.setImmediate(true);
		button_details.setWidth("185px");
		button_details.setHeight("-1px");
		mainLayout.addComponent(button_details,
				"top:265.0px;right:290.0px;left:370.0px;");

		// label_status
		label_status = new Label();
		label_status.setImmediate(false);
		label_status.setWidth("-1px");
		label_status.setHeight("-1px");
		label_status.setValue("Status :");
		mainLayout.addComponent(label_status, "top:222.0px;left:260.0px;");

		// field showstatus: shows the current status of the client
		field_showstatus = new TextField();
		field_showstatus.setImmediate(false);
		mainLayout.addComponent(field_showstatus, "top:222.0px; left:370.0px");

		// label_firstname
		label_firstname = new Label();
		label_firstname.setImmediate(false);
		label_firstname.setWidth("-1px");
		label_firstname.setHeight("-1px");
		label_firstname.setValue("Firstname:");
		mainLayout.addComponent(label_firstname, "top:102.0px;left:260.0px;");

		// label_lastname
		label_lastname = new Label();
		label_lastname.setImmediate(false);
		label_lastname.setWidth("-1px");
		label_lastname.setHeight("-1px");
		label_lastname.setValue("Lastname:");
		mainLayout.addComponent(label_lastname, "top:142.0px;left:260.0px;");

		// label_Birthdate
		label_birthdate = new Label();
		label_birthdate.setImmediate(false);
		label_birthdate.setWidth("-1px");
		label_birthdate.setHeight("-1px");
		label_birthdate.setValue("Birthdate:");
		mainLayout.addComponent(label_birthdate, "top:182.0px;left:260.0px;");

		// label street: Title for street
		label_street = new Label();
		label_street.setImmediate(false);
		label_street.setWidth("-1px");
		label_street.setHeight("-1px");
		label_street.setValue("Street:");
		label_street.setVisible(false);
		mainLayout.addComponent(label_street, "top:362.0px;left:60.0px;");

		// label zip: Title for zip code and city
		label_zip = new Label();
		label_zip.setImmediate(false);
		label_zip.setWidth("-1px");
		label_zip.setHeight("-1px");
		label_zip.setValue("zip / city:");
		label_zip.setVisible(false);
		mainLayout.addComponent(label_zip, "top:402.0px;left:60.0px;");

		// label country: Title for country
		label_country = new Label();
		label_country.setImmediate(false);
		label_country.setWidth("-1px");
		label_country.setHeight("-1px");
		label_country.setValue("country:");
		label_country.setVisible(false);
		mainLayout.addComponent(label_country, "top:442.0px;left:60.0px;");

		// label_mobile number
		label_mobile = new Label();
		label_mobile.setImmediate(false);
		label_mobile.setWidth("-1px");
		label_mobile.setHeight("-1px");
		label_mobile.setValue("phone Nr.:");
		label_mobile.setVisible(false);
		mainLayout.addComponent(label_mobile, "top:522.0px;left:60.0px;");

		// label_email
		label_email = new Label();
		label_email.setImmediate(false);
		label_email.setWidth("-1px");
		label_email.setHeight("-1px");
		label_email.setValue("email:");
		label_email.setVisible(false);
		mainLayout.addComponent(label_email, "top:562.0px;left:60.0px;");

		// label_emergency contact
		label_emergency = new Label();
		label_emergency.setImmediate(false);
		label_emergency.setWidth("-1px");
		label_emergency.setHeight("-1px");
		label_emergency.setValue("emergency contact:");
		label_emergency.setVisible(false);
		mainLayout.addComponent(label_emergency, "top:602.0px;left:60.0px;");

		// emergency contact TextField
		field_emergency = new Label();
		field_emergency.setImmediate(false);
		field_emergency.setWidth("250px");
		field_emergency.setVisible(false);
		mainLayout.addComponent(field_emergency, "top:600.0px; left:210.0px");

		// label_doctor
		label_doctor = new Label();
		label_doctor.setImmediate(false);
		label_doctor.setWidth("-1px");
		label_doctor.setHeight("-1px");
		label_doctor.setValue("doctor:");
		label_doctor.setVisible(false);
		mainLayout.addComponent(label_doctor, "top:642.0px;left:60.0px;");

		// doctor TextField
		field_doctor = new Label();
		field_doctor.setImmediate(false);
		field_doctor.setWidth("250px");
		field_doctor.setVisible(false);
		mainLayout.addComponent(field_doctor, "top:640.0px; left:210.0px");

		// label_title
		label_title = new Label();
		label_title.setImmediate(false);
		label_title.setWidth("-1px");
		label_title.setHeight("-1px");
		label_title.setValue("Client View");
		mainLayout.addComponent(label_title, "top:40.0px;left:61.0px;");

		field_firstname = new TextField();
		mainLayout.addComponent(field_firstname, "top:100.0px; left:370.0px");

		field_lastname = new TextField();
		mainLayout.addComponent(field_lastname, "top:140.0px; left:370.0px");

		field_birthdate = new DateField();
		mainLayout.addComponent(field_birthdate, "top:180.0px; left:370.0px");

		field_street = new TextField();
		field_street.setVisible(false);
		field_street.setWidth("250px");
		mainLayout.addComponent(field_street, "top:360.0px; left:210.0px");

		field_zip = new TextField();
		field_zip.setVisible(false);
		field_zip.setWidth("100px");
		mainLayout.addComponent(field_zip, "top:400.0px; left:210.0px");

		field_city = new TextField();
		field_city.setVisible(false);
		field_city.setWidth("150px");
		mainLayout.addComponent(field_city, "top:400.0px; left:310.0px");

		field_country = new TextField();
		field_country.setWidth("250px");
		field_country.setVisible(false);
		mainLayout.addComponent(field_country, "top:440.0px; left:210.0px");

		field_mobile = new TextField();
		field_mobile.setWidth("250px");
		field_mobile.setVisible(false);
		mainLayout.addComponent(field_mobile, "top:520.0px; left:210.0px");

		field_email = new TextField();
		field_email.setWidth("250px");
		field_email.setVisible(false);
		mainLayout.addComponent(field_email, "top:560.0px; left:210.0px");

		// the action when the "Detail" button has been clicked. Shows and hides
		// the detail view
		button_details.addClickListener(new Button.ClickListener() {

			// this method adds or hides the client details to the ClientUI
			// after clicking the button "details"
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				hideOrShowDetails();

			}
		});

		return mainLayout;
	}

	@Override
	public void enter(ViewChangeEvent event) {
		if (event.getParameters() == null || event.getParameters().isEmpty()) {
			setCaption("Kein Klient übermittelt");
			return;
		}

		int clientNr = Integer.parseInt(event.getParameters());
		Client client = ClientController.getClientForID(clientNr);
		if (client == null) {
			setCaption("Kein gültiger Klient");
			return;
		}

		setClientDataToReadOnly(false);
		loadClientData(client);
		setClientDataToReadOnly(true);

		
	}

	// Hide or show the attributes of the detail part (street, zip, city,
	// country, mobile, email, emergency contact and doctor of the ClientUI
	private void hideOrShowDetails() {
		if (isHidden == true) {
			isHidden = false;

			field_street.setVisible(true);
			field_zip.setVisible(true);
			field_city.setVisible(true);
			field_country.setVisible(true);
			field_mobile.setVisible(true);
			field_email.setVisible(true);
			field_emergency.setVisible(true);
			field_doctor.setVisible(true);

			label_street.setVisible(true);
			label_zip.setVisible(true);
			label_country.setVisible(true);
			label_mobile.setVisible(true);
			label_email.setVisible(true);
			label_emergency.setVisible(true);
			label_doctor.setVisible(true);

		} else {
			isHidden = true;

			field_mobile.setVisible(false);
			field_email.setVisible(false);
			field_emergency.setVisible(false);
			field_doctor.setVisible(false);
			field_street.setVisible(false);
			field_zip.setVisible(false);
			field_city.setVisible(false);
			field_country.setVisible(false);

			label_street.setVisible(false);
			label_zip.setVisible(false);
			label_country.setVisible(false);
			label_mobile.setVisible(false);
			label_email.setVisible(false);
			label_emergency.setVisible(false);
			label_doctor.setVisible(false);
		}

	}

	// Set for all client information fields the ReadOnly state
	private void setClientDataToReadOnly(boolean readOnly) {
		field_lastname.setReadOnly(readOnly);
		field_firstname.setReadOnly(readOnly);
		field_birthdate.setReadOnly(readOnly);
		field_street.setReadOnly(readOnly);
		field_zip.setReadOnly(readOnly);
		field_city.setReadOnly(readOnly);
		field_country.setReadOnly(readOnly);
		field_mobile.setReadOnly(readOnly);
		field_mobile.setReadOnly(readOnly);
		field_email.setReadOnly(readOnly);
		field_emergency.setReadOnly(readOnly);
		field_doctor.setReadOnly(readOnly);
		field_showstatus.setReadOnly(readOnly);
	}

	// loads the client data to the related variables

	private void loadClientData(Client c) {

		field_emergency.setValue(c.getEmergencyContact().getFirstName() + " "
				+ c.getEmergencyContact().getLastName());
		field_doctor.setValue(c.getDoc().getFirstName() + " "
				+ c.getDoc().getLastName());
		field_showstatus.setValue(c.isHarmless() ? "harmless" : "harmful");

		addItemPropertyToField(c);

	}

	// binds the client datas to the related field

	private void addItemPropertyToField(Client c) {

		BeanItem<Client> item = new BeanItem<Client>(c);

		if (c.getAddress() == null) {
			Address defaultAddress = new Address(null, null, null, null);
			c.setAddress(defaultAddress);
		}

		BeanItem<Address> itemAddress = new BeanItem<Address>(c.getAddress());

		field_firstname
				.setPropertyDataSource(item.getItemProperty("firstName"));

		field_lastname.setPropertyDataSource(item.getItemProperty("lastName"));

		field_birthdate.setPropertyDataSource(item.getItemProperty("birthday"));

		field_street.setPropertyDataSource(itemAddress
				.getItemProperty("street"));

		field_zip.setPropertyDataSource(itemAddress.getItemProperty("zip"));

		field_city.setPropertyDataSource(itemAddress.getItemProperty("city"));

		field_country.setPropertyDataSource(itemAddress
				.getItemProperty("country"));

		field_mobile.setPropertyDataSource(item.getItemProperty("mobileNr"));

		field_email.setPropertyDataSource(item.getItemProperty("email"));

		isHidden = false;
		hideOrShowDetails();

	}
}
